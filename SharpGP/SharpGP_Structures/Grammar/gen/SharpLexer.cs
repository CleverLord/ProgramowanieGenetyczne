//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.10.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:/Users/cl3v3/Documents/GitHub/ProgramowanieGenetyczne/SharpGP/SharpGP_Structures/Grammar\Sharp.g4 by ANTLR 4.10.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.10.1")]
[System.CLSCompliant(false)]
public partial class SharpLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, OPERAND=11, COMPAREOP=12, INT=13, WS=14, VAR=15;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "OPERAND", "COMPAREOP", "INT", "WS", "VAR"
	};


	public SharpLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public SharpLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "'loop'", "'read()'", "'write'", "'('", "')'", "';'", 
		"'if ('", "'='"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, "OPERAND", 
		"COMPAREOP", "INT", "WS", "VAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Sharp.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static SharpLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,15,101,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
		4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,
		1,9,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,78,8,11,
		1,12,4,12,81,8,12,11,12,12,12,82,1,13,4,13,86,8,13,11,13,12,13,87,1,13,
		1,13,1,14,1,14,1,14,1,14,1,14,5,14,97,8,14,10,14,12,14,100,9,14,0,0,15,
		1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
		29,15,1,0,4,3,0,42,43,45,45,47,47,2,0,60,60,62,62,1,0,48,57,3,0,9,10,13,
		13,32,32,107,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
		0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,
		1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,1,31,1,0,0,
		0,3,33,1,0,0,0,5,35,1,0,0,0,7,40,1,0,0,0,9,47,1,0,0,0,11,53,1,0,0,0,13,
		55,1,0,0,0,15,57,1,0,0,0,17,59,1,0,0,0,19,64,1,0,0,0,21,66,1,0,0,0,23,
		77,1,0,0,0,25,80,1,0,0,0,27,85,1,0,0,0,29,91,1,0,0,0,31,32,5,123,0,0,32,
		2,1,0,0,0,33,34,5,125,0,0,34,4,1,0,0,0,35,36,5,108,0,0,36,37,5,111,0,0,
		37,38,5,111,0,0,38,39,5,112,0,0,39,6,1,0,0,0,40,41,5,114,0,0,41,42,5,101,
		0,0,42,43,5,97,0,0,43,44,5,100,0,0,44,45,5,40,0,0,45,46,5,41,0,0,46,8,
		1,0,0,0,47,48,5,119,0,0,48,49,5,114,0,0,49,50,5,105,0,0,50,51,5,116,0,
		0,51,52,5,101,0,0,52,10,1,0,0,0,53,54,5,40,0,0,54,12,1,0,0,0,55,56,5,41,
		0,0,56,14,1,0,0,0,57,58,5,59,0,0,58,16,1,0,0,0,59,60,5,105,0,0,60,61,5,
		102,0,0,61,62,5,32,0,0,62,63,5,40,0,0,63,18,1,0,0,0,64,65,5,61,0,0,65,
		20,1,0,0,0,66,67,7,0,0,0,67,22,1,0,0,0,68,69,5,61,0,0,69,78,5,61,0,0,70,
		71,5,33,0,0,71,78,5,61,0,0,72,78,7,1,0,0,73,74,5,62,0,0,74,78,5,61,0,0,
		75,76,5,60,0,0,76,78,5,61,0,0,77,68,1,0,0,0,77,70,1,0,0,0,77,72,1,0,0,
		0,77,73,1,0,0,0,77,75,1,0,0,0,78,24,1,0,0,0,79,81,7,2,0,0,80,79,1,0,0,
		0,81,82,1,0,0,0,82,80,1,0,0,0,82,83,1,0,0,0,83,26,1,0,0,0,84,86,7,3,0,
		0,85,84,1,0,0,0,86,87,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,89,1,0,0,
		0,89,90,6,13,0,0,90,28,1,0,0,0,91,92,5,120,0,0,92,93,5,95,0,0,93,94,1,
		0,0,0,94,98,7,2,0,0,95,97,7,2,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,
		0,0,0,98,99,1,0,0,0,99,30,1,0,0,0,100,98,1,0,0,0,5,0,77,82,87,98,1,6,0,
		0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
